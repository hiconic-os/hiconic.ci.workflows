name: Build

# https://docs.github.com/en/actions/using-workflows/reusing-workflows

on:
  workflow_call:
    inputs:
      # Just for information, has no impact on logic
      job-name:
        type: string
      # Parameter for 'hc-build analyze-codebase' to determine the artifacts to build (git diff for PRs, unpublished or explicit range)
      analyze-codebase-opts:
        type: string
      # Branch to checkout - either the PR branch, or the branch where we have started the build 
      checkout-ref:
        type: string
      # Whether or not we want to publish
      publish:
        type: boolean
        default: true
      # Whether or not to run integration tests
      run-integration-tests:
        type: boolean
        default: false
      # parameter for 'hc-build enrich-exchange-context'
      comment-input:
        type: string
        required: false
      # Generic parameter for propagating environment variables (assignment delimiter: =, pair delimiter: "\n--- ")
      env-vars:
        type: string
        default: ""
      # Allows to parameterize the acompanying services (dockers) as JSON
      services-json:
        type: string
        default: "{}"

    secrets:
      DEVROCK_PIPELINE_UPLOAD_USER:
        required: true
      DEVROCK_PIPELINE_UPLOAD_PASSWORD:
        required: true
      NODE_AUTH_TOKEN:
        required: false
      HC_DECRYPT_SECRET:
        required: false

# Ensure no two workflows of the same type (e.g. 2 PRs) are running at the same time
# FYI within a repo, no 2 workflows with the same group value would run concurrently;
# github.workflow is the name of the action, e.g. "Pull Requests"
concurrency:
  group: ${{ github.workflow }}

jobs:
  build:
    runs-on: ubuntu-latest
    # apply optional service dockers passed from caller
    services: ${{ fromJson(inputs.services-json) }}
    container: ghcr.io/hiconic-os/ci-hiconic-sdk/main:latest

    env:
      # Used in this file

      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPO_NAME: ${{ github.event.repository.name }}
      GIT_REPO_DIR: ${{ github.workspace }}/git-repo

      HC_BUILD_OPTIONS: " : options --protocolCharset UTF-8"

      # Used by Devrock tools

      DEVROCK_REPOSITORY_CONFIGURATION: ${{ github.workspace }}/git-repo/repository-configuration-ci.yaml

      DEVROCK_PIPELINE_EXTERNAL_SEQUENCING: true
      DEVROCK_PIPELINE_CANDIDATE_INSTALL: false

      # Required by repository-configuration-ci.yaml (in each repository)

      GITHUB_READ_PACKAGES_TOKEN: ${{ secrets.DEVROCK_PIPELINE_UPLOAD_PASSWORD }}

      DEVROCK_PIPELINE_UPLOAD_USER: ${{ secrets.DEVROCK_PIPELINE_UPLOAD_USER }}
      DEVROCK_PIPELINE_UPLOAD_PASSWORD: ${{ secrets.DEVROCK_PIPELINE_UPLOAD_PASSWORD }}

      # Required by .npmrc

      NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      # Eventually required by pipeline steps
      ENVIRONMENT_TRIBEFIRE_DECRYPT_SECRET: ${{ secrets.HC_DECRYPT_SECRET }}

    defaults:
      run:
        working-directory: ${{ env.GIT_REPO_DIR }}

    steps:
      - name: Initialize Workspace
        working-directory: ${{ github.workspace }}
        run: |
          mkdir inst
          mkdir repo
          mkdir integration-tests
          jinni version
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.checkout-ref }}
          path: "git-repo"

      # The git fetch is necessary as we need to fetch enough so git sees the common history
      - name: Fetch PR Branch History
        if: github.event_name == 'pull_request'
        run: |
          numCommits=$(( ${{ github.event.pull_request.commits }} + 1 ))

          echo "Fetching PR brach's history - ${numCommits} commits"
          git fetch origin ${{ inputs.checkout-ref }} --depth=${numCommits}

          # base_ref is the name of branch we merge to, e.g. 'main'
          echo "Fetching base branch: ${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }} --depth 2

          echo "----------"
          echo "Branches:"
          git branch -avv

          echo "----------"
          echo "History:"
          git log --graph --oneline --all -n ${numCommits}

      - name: Check PR Branch Up To Date
        if: github.event_name == 'pull_request'
        run: |
          if ! git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "===> PR branch is not up to date. Base branch '${{ github.base_ref }}' is not its ancestor!!!"
            exit 1
          fi

      # fetching depth 2 just to be sure. We don't need history, just the bases for computing diff and enabling pushing
      # for pushing we do another fetch later to get the chain of commits that shows base_ref (branch name) can be 
      # fast-forwarded to inputs.checkout-ref
      - name: Analyze Codebase
        id: analyze-codebase
        run: |
          hc-build initialize-exchange ${{ env.HC_BUILD_OPTIONS }}

          if [ '${{ github.event_name }}' = 'pull_request' ]; then
            echo "Setting up GitHub notifications"
            echo '{gitHubToken: "${env.GITHUB_TOKEN}", organization: "${{ github.event.organization.login }}", repository: "${{ env.GITHUB_REPO_NAME }}", issue: "${{ github.event.number }}"}' > .step-exchange/git-hub-notification-connection.yaml
            echo '{requestLabelMappings: [{request: "PublishArtifacts", label: "published", color: "5319E7"}]}' > .step-exchange/git-hub-notification-mapping.yaml
          fi

          hc-build enrich-exchange-context --commentInput "${{ inputs.comment-input }}" ${{ env.HC_BUILD_OPTIONS }}
          hc-build analyze-codebase ${{ inputs.analyze-codebase-opts }} ${{ env.HC_BUILD_OPTIONS }}

          hasNpm=$(hc-build read-from-exchange-context --type devrock.cicd.model.api.data.CodebaseSummary --property hasNpmBuild : options --response stdout --protocol none)
          echo "hasNpm=$hasNpm"
          echo "hasNpm=$hasNpm" >> $GITHUB_OUTPUT

      - name: Build Artifacts
        run: hc-build build-artifacts --generateOptionals true ${{ env.HC_BUILD_OPTIONS }}

      - name: Check Linking
        run: hc-build check-linking ${{ env.HC_BUILD_OPTIONS }}

      - name: Run Tests
        run: hc-build run-tests ${{ env.HC_BUILD_OPTIONS }}

      - name: Run Integration Tests
        if: inputs.run-integration-tests
        # For whatever reason we have to use $GITHUB_WORKSPACE, because ${{ github.workspace }} would point elsewhere
        # In other places it doesn't matter
        # ${{ github.workspace}} - /home/runner/work/REPO_NAME/REPO_NAME
        # $GITHUB_WORKSPACE      - /__w/REPO_NAME/REPO_NAME
        shell: bash
        run: |
          # Generic propagation of environment variables
          INPUT_ENV_VARS="${{ inputs.env-vars }}"
          INPUT="${INPUT_ENV_VARS#*$'-- '}"
          while [[ -n "$INPUT" ]]; do
            [[ "$INPUT" == *$'\n-- '* ]] && { block="${INPUT%%$'\n-- '*}"; INPUT="${INPUT#*$'\n-- '}"; } || { block="$INPUT"; INPUT=""; }
            export "${block%%=*}=${block#*=}"
          done
  
          hc-build run-integration-tests --workingDirectory "$GITHUB_WORKSPACE/integration-tests" ${{ env.HC_BUILD_OPTIONS }}
      # https://github.com/marketplace/actions/junit-report-action
      - name: Create Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**/dist/testReports/*.xml"
          annotate_only: true
          include_passed: false
          detailed_summary: true

      # NOTE: using node-version: latest started failing with version 23.0.0
      - name: Setup Node.js
        if: inputs.publish && steps.analyze-codebase.outputs.hasNpm == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
#          registry-url: 'https://registry.npmjs.org'

      - name: Publish
        if: inputs.publish
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          hc-build raise-and-merge-artifacts ${{ env.HC_BUILD_OPTIONS }}

          hc-build publish-artifacts ${{ env.HC_BUILD_OPTIONS }}

      # It's safer to publish npm packages after Publish, despite that already setting the "published" label on the PR
      # If we published npm first, and then Maven publishing would fail and not increase versions of certain models,
      # every subsequent attempt to publish into npm would fail because of an already existing version
      - name: Publish npm Packages
        if: inputs.publish && steps.analyze-codebase.outputs.hasNpm == 'true'
        run: hc-build publish-npm-packages ${{ env.HC_BUILD_OPTIONS }}

      - name: Save step-exchange Data
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "step-exchange--${{ env.GITHUB_REPO_NAME }}--#${{ github.run_number }}"
          path: ${{ github.workspace }}/git-repo/.step-exchange/
          include-hidden-files: true
          if-no-files-found: ignore

      - name: Save compiled repository configuration
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "compiled-repo-config--${{ env.GITHUB_REPO_NAME }}--#${{ github.run_number }}"
          path: |
            ${{ github.workspace }}/repo/view
            ${{ github.workspace }}/repo/compiled-repo-config
          include-hidden-files: true
          if-no-files-found: ignore

      - name: Save Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "junit-results--${{ env.GITHUB_REPO_NAME }}--#${{ github.run_number }}"
          path: "**/dist/testReports/*.xml"
          if-no-files-found: ignore

      - name: Save Integration Test Logs
        uses: actions/upload-artifact@v4
        if: always() && inputs.run-integration-tests
        with:
          name: "integration-test-logs--${{ env.GITHUB_REPO_NAME }}--#${{ github.run_number }}"
          path: "${{ github.workspace }}/integration-tests/logs/**/*"
          if-no-files-found: ignore

#
# Uncomment 'ctx'job if you want to see what's available in context objects like ${ github.xyz }        
#

#  ctx:
#    uses: ./.github/workflows/dump-context.yaml
